generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model schema_migrations {
  version String @id @db.VarChar(255)
}

model accounts {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email      String    @unique
  password   String?
  oauth      Json?
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  users      users[]
}

model feed_post_likes {
  feed_post_id String     @db.Uuid
  liker_id     String     @db.Uuid
  feed_posts   feed_posts @relation(fields: [feed_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users      @relation(fields: [liker_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([feed_post_id, liker_id])
}

model feed_posts {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id         String            @db.Uuid
  is_repost       Boolean
  author_id       String            @db.Uuid
  users           users             @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts           posts             @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  feed_post_likes feed_post_likes[]
}

model images {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  aspect_ratio  Float           @db.Real
  height        Int             @default(autoincrement()) @db.SmallInt
  width         Int             @default(autoincrement()) @db.SmallInt
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  deleted_at    DateTime?       @db.Timestamp(6)
  user_profiles user_profiles[]
  users         users[]
}

model post_tags {
  post_id  String @db.Uuid
  tag_text String
  posts    posts  @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags     tags   @relation(fields: [tag_text], references: [text], onDelete: NoAction, onUpdate: NoAction)

  @@id([post_id, tag_text])
}

model posts {
  id         String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  author_id  String          @db.Uuid
  visibility post_visibility
  type       post_type
  data       Json
  users      users           @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  feed_posts feed_posts[]
  post_tags  post_tags[]
}

model tags {
  text        String      @id
  description String?
  post_tags   post_tags[]
}

model user_follows {
  follower_id                           String @db.Uuid
  followee_id                           String @db.Uuid
  users_user_follows_followee_idTousers users  @relation("user_follows_followee_idTousers", fields: [followee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_user_follows_follower_idTousers users  @relation("user_follows_follower_idTousers", fields: [follower_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([follower_id, followee_id])
}

model user_profiles {
  user_id   String  @id @db.Uuid
  header_id String? @db.Uuid
  biography String?
  socials   Json?
  images    images? @relation(fields: [header_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                                           String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  owner_id                                     String            @db.Uuid
  username                                     String            @unique
  avatar_id                                    String?           @db.Uuid
  status                                       user_status
  created_at                                   DateTime          @default(now()) @db.Timestamp(6)
  updated_at                                   DateTime          @default(now()) @db.Timestamp(6)
  deleted_at                                   DateTime?         @db.Timestamp(6)
  images                                       images?           @relation(fields: [avatar_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  accounts                                     accounts          @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  feed_post_likes                              feed_post_likes[]
  feed_posts                                   feed_posts[]
  posts                                        posts[]
  user_follows_user_follows_followee_idTousers user_follows[]    @relation("user_follows_followee_idTousers")
  user_follows_user_follows_follower_idTousers user_follows[]    @relation("user_follows_follower_idTousers")
  user_profiles                                user_profiles?
}

enum post_type {
  blog
  gallery
  reply
}

enum post_visibility {
  all
  followrs
  mutuals
}

enum user_status {
  public
  private
}
